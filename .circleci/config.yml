# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
# For a detailed guide to building and testing on Android, read the docs:
# https://circleci.com/docs/language-android/ for more details.
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/orb-intro/
orbs:
  android: circleci/android@2.3

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  test:
    # These next lines define the Android machine image executor.
    # See: https://circleci.com/docs/executor-types/
    executor:
      name: android/android-machine
      resource-class: large
      tag: 2023.10.1

    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout

      # Restore gradle cache
      - android/restore-gradle-cache

      # Run the unit tests
      - android/run-tests:
          test-command: ./gradlew lint testDebug --continue

      # Generate Code Coverage Report
      - run:
          name: "Generate Code Coverage Report for unit tests"
          command: ./gradlew codeCoverageReportDebug

      # Create an AVD named "testavd-34"
      - android/create-avd:
          avd-name: testavd-34
          system-image: system-images;android-34;google_apis;x86_64
          install: true

      - android/start-emulator:
          avd-name: testavd-34
          restore-gradle-cache-post-emulator-launch: false

      # Runs instrumentation tests
      - android/run-tests

      # Terminate any running emulator processes
      - android/kill-emulators

      # Run SonarCloud Scan
      - run:
          name: "Run SonarCloud Scan"
          command: ./gradlew sonar --info
          when: always

      # Create an AVD named "testavd-24"
      - android/create-avd:
          avd-name: testavd-24
          system-image: system-images;android-24;google_apis;x86_64
          install: true

      - android/start-emulator:
          avd-name: testavd-24
          restore-gradle-cache-post-emulator-launch: false

      # Runs instrumentation tests
      - android/run-tests

      # Terminate any running emulator processes
      - android/kill-emulators

      # Build APK
      - run:
          name: "Build APK"
          command: |
            ./gradlew assembleDebug;
            mkdir -p ~/artifacts/;
            cp ./app/build/outputs/apk/debug/app-debug.apk ~/artifacts/Vinilos-Equipo11.apk

      # Save APK
      - store_artifacts:
          path: ~/artifacts

      # Save gradle cache
      - android/save-gradle-cache

      # Save test results
      - run:
          name: "Save test results"
          command: |
            mkdir -p ~/test-results/junit/;
            find . -type f -regex "./app/build/test-results/testDebugUnitTest/.*xml" -exec cp {} ~/test-results/junit/ \;
            find . -type f -regex "./app/build/outputs/androidTest-results/connected/debug/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always

      # Store test results
      - store_test_results:
          path: ~/test-results

# Invoke jobs via workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  android: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - test
